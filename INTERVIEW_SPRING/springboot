1. Differences between @SpringBootApplication and @EnableAutoConfiguration annotation?

Ans:  @SpringBootApplication combines three annotation like @Configuration,@EnableAutoConfiguration and @Componentscan
      @EnableAutoConfiguartion : It enables the spring boot auto configuration feature,which automatically configure the application 
                                 based on the classpath dependencies,property settings,and other conditions
                                 It leverages the spring.factoriesfile to find and apply the relevant auto configuartions

2. What are the best way to expose custom application configuration in springboot?
Ans:   A. Property files(*.properties or *.yml)
          cutom.app.property=value or
          custom:
             app:
                property: value
   First : We can use @Value / @ConfigurationProperties
    ex. @Value("${custom.app.property}")
        or
        @ConfigurationProperties("custom.app")
    Second : Create Configuration class and use the properties using @value
    External configuation file like application-dev.properties / application-prod.properties  can be pulled based on active-profile

3. What is @RestController annotation in Springboot?
Ans:  It is combination of @controller + @ResponseBody
      @controller   - Indicates the annotated class is a controlller Component 
      @ResponseBody - Return value directly serializes into automatically serialized into 
                      JSON or XML (based on the Accept header of the request) and sent as the response.

4. What is the difference between @RestController and @Controller annotations?
Ans :  The difference lies in the response handling mechanism:

       @RestController is used for building RESTful APIs and automatically serializes the return value into the response body.
       @Controller is used for handling requests in a web application and typically returns a 
                    view name or a ModelAndView object for rendering a view.
5.  What is the difference between @RequestMapping and @GetMapping?
@RequestMapping: This annotation is a generic annotation used to map a request to a method in a controller class. It can handle requests of any HTTP method (GET, POST, PUT, DELETE, etc.). You specify the HTTP method using the method attribute of the @RequestMapping annotation.
@GetMapping: This annotation is a specialized version of @RequestMapping specifically for handling HTTP GET requests. It is a shortcut annotation that combines @RequestMapping with the GET HTTP method. It simplifies the mapping of GET requests to controller methods.

6. Transaction Management in Springboot?
   Ans: (https://www.scaler.com/topics/spring-boot/transaction-management-in-spring-boot/)
       - Programmatic
       - Declarative
       - Declarative using @Transactional
       - Programatic using TransactionalTemplate
       - What happens after caller encounters @Transactional 
          - It first invokes the proxy that uses the Transactional Interceptor
          - Transactional Advisors associated 
          - Target Method execution
       - Properties of @Transactional
          - Propagation -> It decides how new transaction will start 1. PROPAGATION_REQUIRED default one. Create new transaction or else use th existing. 2. PRPAGATION_REQUIRED_NEW 3. PrOPAGATION_SUPPORT  (never create new tx) 4. 
          -Isolation
          -Timeout
          -RollbackFor
          - NoRollbackFor
          - ReadOnly
            