#41 System Design: Distributed Cache and Caching Strategies | Cache-Aside, Write-Through, Write-Back
------- -------- -------- ------- ------- ------- ---------- ------  ------- ------
(https://www.youtube.com/watch?v=RtOyBwBICRs)
(https://www.youtube.com/watch?v=U3RkDLtS7uY) - Gaurv Sen
What is caching ->
-> Storing frequently used data in a fast faced memory than accessing dataevery time from slow access memory(Hard disk,DB).
-> It helps in faut tolrent,It's very fast and low latency
-> There are different types of caching  present at different layer like
    a. browser caching
    b.CDN(to store static data)
    c.Load Balancer
    d.Server side Application caching (like Redis etc)
 === ==== ==== =====

 Server Side application Caching
~~~~ ~~~~ ~~~~ ~~~~ ~~~~~

  * In this type of caching sit in between application server and db. Before Client reaching to the server, It reach to LB(Load Balancer)
  and it first check the cache
  * Generally Distributed Caching, it avoid single point of failure and scalability
  * SO it mantains a pools called cache pool.
  * APP_SERVER1, APP_SERVER2,APP_SERVER3 -> RedisCache1 (Here chances of single point of failure)

    Distributed Caching:::::::
    APP_SERVER1, APP_SERVER2,APP_SERVER3 -> CachePool (It has pool of cache server)
    CacheClient1, CacheClient2,CacheClient3 (Ch1,Ch2,Ch3...etc)


  Cache Stratergy ::
  ---------------
  A. Cache Aside -> If data found called cache hit if not found then cache miss
                    if cache miss then it will fetch from db and write to cache and send the response to client.
                    This is good for heavy read
  B. Read Through Cache -> If cache miss ,it write sto cache then sends back to client. But in Cache Aside if miss it get from
                           DB and sends to client with out writing to cache hence cache inconsitency
  C. Write Around Cache



#43 CAP Theorem ? (Very important)
-- --- -- --- ---

The CAP theorem, also known as Brewer's theorem, is a fundamental principle in distributed systems that highlights the
trade-offs between three essential properties in a distributed data store: Consistency, Availability, and Partition
tolerance.

Consistency (C): This property refers to ensuring that all nodes in a distributed system have the same data at the
same time. In a consistent system, when a data update occurs, all subsequent accesses to that data will reflect the
update. Every read receives the most recent write or an error.

Availability (A): This property ensures that every request made to the system receives a response, regardless of the
success or failure of that request. An available system remains operational and responsive even in the face of node
failures or network issues.

Partition Tolerance (P): This property deals with the system's ability to function and maintain its operations despite
network partitions or communication failures between nodes. In a partitioned network, nodes are unable to communicate
due to a network split, yet the system should continue to operate as much as possible.

The CAP theorem states that in a distributed system, it is impossible to simultaneously guarantee all three propertiesâ€”Consistency,
 Availability, and Partition tolerance. It asserts that in the event of a network partition (P), a distributed system
 must choose between either Consistency (C) or Availability (A).

CA Systems: Some systems prioritize Consistency and Availability, sacrificing Partition tolerance. These systems
prioritize data consistency over immediate availability in the event of a network partition. When faced with a
partition, they become unavailable to maintain consistency.

CP Systems: Other systems prioritize Consistency and Partition tolerance, sacrificing immediate Availability. These
systems maintain consistency even in the face of network partitions but might become temporarily unavailable during
partitioned scenarios.

AP Systems: Some systems prioritize Availability and Partition tolerance, sacrificing strict Consistency. These systems
prioritize being always available and responsive, even in the presence of network partitions, potentially leading to
a temporary lack of strict consistency.

In real-world distributed systems, the choice between these properties depends on various factors such as system requirements,
use cases, scalability needs, and the desired behavior during network failures. Designing distributed systems involves
 making trade-offs among these properties based on the specific needs of the application or service.

 == === === ==== ===== ===== ===== ====== ===== =======

 #44 . What is Load Balancing?

 Ans ::