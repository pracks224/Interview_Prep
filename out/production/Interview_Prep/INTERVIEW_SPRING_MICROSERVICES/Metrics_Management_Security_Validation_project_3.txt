There is a tiny student information system built on Spring Boot. The admin wants to know some application metrics and metadata of the system running the application. However, they don't want to reveal to anyone that the application is monitoring information, which means this information should be protected.

 

The definitions and detailed requirements list follow. You will be graded on whether your application performs data retrieval and manipulation based on given use cases exactly as described in the requirements.

 

Here are the application requirements:

Write a user-defined actuator function that provides the Spring version information of the system. This information should be served via URL, like /monitoring/springVersion.
Write a custom Spring Boot security function to protect the URL /monitoring/springVersion.
All the default and system-provided actuator endpoints must be disabled.
Allow only the custom actuator endpoint /monitoring/springVersion.
The rest of the app URLs should work without authentication.
 

While securing the actuator endpoint, note the following:

Session management needs to be stateless.
CSRF needs to be disabled.
 

The application should expose the following endpoints:

 

GET request to /monitoring/springVersion:

this is the actuator endpoint
it must require basic HTTP authentication to be accessible
it should return the Spring version used in this app as a response string with status code 200
 

GET request to /app/student:

this is the REST endpoint
it should be accessible without authentication
implementation for this has already been provided
 

The authentication features in this question are handled using the HTTP Basic Authentication. For any given request to be authenticated, the header "Authorization: Basic {encoded user and password}" is passed. Generally, in a full-fledged web application, this password would be encoded, but for the scope of this question, the password will be a plain-text string.

 

Your task is to complete the implementation of the SpringVersionActuator & SpringSecurityConfig classes so it passes all the test cases when running the provided unit tests.

 

Note that the username and password combinations have been configured as in-memory values in `SpringSecurityConfig.java`. You just have to handle the part of defining the version actuator endpoint and securing it.

 

Example requests and responses
GET request to /monitoring/springVersion

Header: Authorization = "Basic admin:admin"

The response code is 200, and the response is:


{
  "version": "2.2.1.RELEASE"
}

 

GET request to /monitoring/springVersion

Header: Authorization = "Basic wrongusername:admin"

The response code is 401, "Unauthorized".

 

GET request to /actuator/info

Header: Authorization = "Basic: admin:admin"

The response code is 404, "Not Found".

 

GET request to /app/student

The response code is 200, and the response body is Student.
