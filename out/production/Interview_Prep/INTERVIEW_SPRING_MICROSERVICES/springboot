1. Spring Framework
2. Spring Boot
3. Dependency Injection (DI)
4. Inversion of Control (IoC)
5. Spring Annotations
6. Application Context
7. Bean
8. @Component
9. @Autowired
10. @Qualifier
11. @Configuration
12. @Bean
13. @Value
14. @Primary
15. @ComponentScan
16. @RestController
17. @RequestMapping
18. @GetMapping
19. @PostMapping
20. @PutMapping
21. @DeleteMapping
22. @PatchMapping
23. @RequestBody
24. @ResponseBody
25. ResponseEntity
26. @PathVariable
27. @RequestParam
28. @ExceptionHandler
29. @ControllerAdvice
30. Spring MVC
31. Spring Data JPA
32. Spring Security
33. Spring AOP (Aspect-Oriented Programming)
34. Spring Transactions
35. @Transactional
36. JPA (Java Persistence API)
37. Hibernate
38. Spring Boot Starter
39. Spring Boot Actuator
40. Spring Boot DevTools
41. Spring Boot CLI
42. Spring Boot Autoconfiguration
43. Spring Boot Properties
44. Spring Boot Profiles
45. SpringApplication
46. YAML Configuration
47. Logging with Spring Boot
48. RESTful Web Services
49. Microservices Architecture
50. Spring Boot Testing
51. Unit Testing
52. Integration Testing
53. MockMvc
54. TestRestTemplate
55. Spring Boot Security
56. OAuth 2.0
57. JWT (JSON Web Token)
58. Spring Boot and Docker
59. Spring Boot and Kubernetes
60. Spring Boot and JMS (Java Message Service)
61. Spring Boot and WebSockets
62. Spring Boot and Caching
63. Spring Boot and Scheduled Tasks
64. Spring Boot and Thymeleaf
65. Spring Boot and Angular
66. Spring Boot and React
67. Spring Boot and Vue.js
68. Spring Boot and Kotlin
69. Spring Boot Actuator Endpoints
70. Actuator Health Check
71. Actuator Metrics
72. Actuator Auditing
73. Actuator Environment
74. Actuator Info
75. Actuator Shutdown
76. Actuator Beans
77. Actuator Mappings
78. Actuator Trace
79. Actuator Web
80. Actuator Heap Dump
81. Actuator Thread Dump
82. Actuator Prometheus
83. Actuator Logfile
84. Actuator HTTP Tracing
85. Actuator Feature Toggles
86. Spring Boot and MongoDB
87. Spring Boot and MySQL
88. Spring Boot and PostgreSQL
89. Spring Boot and Redis
90. Spring Boot and Cassandra
91. Spring Boot and Elasticsearch
92. Spring Boot and AWS (Amazon Web Services)
93. Spring Boot and Azure
94. Spring Boot and Google Cloud
95. Spring Boot and Kafka
96. Spring Boot and RabbitMQ
97. Spring Boot and GraphQL
98. Spring Boot and Batch Processing
99. Spring Boot and Security Best Practices

These concepts cover a wide range of topics that are commonly asked about in Spring Boot interviews.






















11. How do services communicate each other?
    ->Using HttpClient /Http/Rest call
    -> Asynchronous Messaging (Messaging queue)
    -> Event Driven Architectute(Important)
    -> GraphQL
    -> Service Mesh (Istio,Linkerd etc)
12. How can you disable the Autoconfiguration in Spring boot Application?
    @EnableAutoConfiguration annotation along with exclude  by name,class and we can pass list classes etc

1. Differences between @SpringBootApplication and @EnableAutoConfiguration annotation?

Ans:  @SpringBootApplication combines three annotation like @Configuration,@EnableAutoConfiguration and @Componentscan
      @EnableAutoConfiguartion : It enables the spring boot auto configuration feature,which automatically configure the application 
                                 based on the classpath dependencies,property settings,and other conditions
                                 It leverages the spring.factoriesfile to find and apply the relevant auto configuartions

2. What are the best way to expose custom application configuration in springboot?
Ans:   A. Property files(*.properties or *.yml)
          cutom.app.property=value or
          custom:
             app:
                property: value
   First : We can use @Value / @ConfigurationProperties
    ex. @Value("${custom.app.property}")
        or
        @ConfigurationProperties("custom.app")
    Second : Create Configuration class and use the properties using @value
    External configuation file like application-dev.properties / application-prod.properties  can be pulled based on active-profile

3. What is @RestController annotation in Springboot?
Ans:  It is combination of @controller + @ResponseBody
      @controller   - Indicates the annotated class is a controlller Component 
      @ResponseBody - Return value directly serializes into automatically serialized into 
                      JSON or XML (based on the Accept header of the request) and sent as the response.

4. What is the difference between @RestController and @Controller annotations?
Ans :  The difference lies in the response handling mechanism:

       @RestController is used for building RESTful APIs and automatically serializes the return value into the response body.
       @Controller is used for handling requests in a web application and typically returns a 
                    view name or a ModelAndView object for rendering a view.
5.  What is the difference between @RequestMapping and @GetMapping?
@RequestMapping: This annotation is a generic annotation used to map a request to a method in a controller class. It can handle requests of any HTTP method (GET, POST, PUT, DELETE, etc.). You specify the HTTP method using the method attribute of the @RequestMapping annotation.
@GetMapping: This annotation is a specialized version of @RequestMapping specifically for handling HTTP GET requests. It is a shortcut annotation that combines @RequestMapping with the GET HTTP method. It simplifies the mapping of GET requests to controller methods.

6. Transaction Management in Springboot?
   Ans: 
       (https://www.scaler.com/topics/spring-boot/transaction-management-in-spring-boot/)
       (https://medium.com/@beratyesbek/spring-boot-transaction-management-propagation-isolation-levels-f3981b22ef4d)
       - Programmatic
       - Declarative
       - Declarative using @Transactional
       - Programatic using TransactionalTemplate
       - What happens after caller encounters @Transactional 
          - It first invokes the proxy that uses the Transactional Interceptor
          - Transactional Advisors associated 
          - Target Method execution
       - Properties of @Transactional
          - Propagation -> It decides how new transaction will start 1. PROPAGATION_REQUIRED default one. Create new transaction or else use th existing. 
              2. PRPAGATION_REQUIRED_NEW 
              3. PrOPAGATION_SUPPORT  (never create new tx) 
              4. 
          -Isolation levels are DIRTY READ, NON REPEATABLE READ,PHANTOM READ
          -Timeout
          -RollbackFor
          - NoRollbackFor
          - ReadOnly
7. How to handle exception spring boot.
   For more details : -> https://medium.com/@aedemirsen/spring-boot-global-exception-handler-842d7143cf2a
   For Global Exception Handler
   @ControllerAdvice --> this is at class level
   @ExceptionHandler({StudentNotFoundException.class}) --> exception method level
   I think also @RestControllerAdvice for message return in json format
8.  Circuit Breaker Design Pattern
     Resillient and fault tolrent system
     -> If one remore service fails, then fallback response will trigger
     -> Ressilence4j, Netflix Hystrix, Istio etc
9. API Gateway Design Pattern
   -> API Gateway is implemented to handle requests from clients to backend services and encapsulate the complexity, 
      sometimes it is used to handle authentication
   -> Can be  used for rate liniting,Circuit breaker,authentication,service discovery etc
10. Describe some principle of Mircro Service deployment?
    Microservice deployment relies on several principles to ensure scalability, resilience, and maintainability. 
    Here are some key principles:
             A. Decentralized Data Management: Each microservice should have its own database or data storage mechanism. This decentralization minimizes dependencies between services and allows teams to choose the most suitable data storage technology for their specific requirements.

             B.Containerization: Microservices are often deployed using containerization technologies like Docker. Containers encapsulate the application and its dependencies, making it easy to deploy consistently across different environments.
            
            C.Infrastructure as Code (IaC): Infrastructure components, such as servers, load balancers, and databases, are managed programmatically using tools like Terraform or AWS CloudFormation. This allows for versioning, repeatability, and automation of infrastructure provisioning and configuration.
            
            D.Continuous Integration/Continuous Deployment (CI/CD): Microservices are typically deployed using CI/CD pipelines, which automate the build, testing, and deployment processes. CI/CD pipelines ensure rapid and reliable delivery of changes to production environments.
            
            E.Service Discovery and Registration: Microservices need to be able to discover and communicate with each other dynamically. Service discovery mechanisms, such as Consul, Eureka, or Kubernetes' built-in service discovery, allow services to register themselves and discover other services at runtime.
            
            F.Fault Tolerance and Resilience: Microservices should be designed to handle failures gracefully. Techniques such as circuit breakers, retries, timeouts, and bulkheads are used to prevent cascading failures and maintain system availability.
            
            G.Auto-scaling: Microservice architectures often involve auto-scaling mechanisms that automatically adjust the number of instances of a service based on demand. This ensures that the system can handle varying levels of load efficiently while minimizing costs.
            
            H.Immutable Infrastructure: Instead of modifying existing infrastructure components, new versions are deployed as immutable artifacts. This ensures consistency and eliminates configuration drift, making it easier to roll back to a previous version if needed.
            
            I.Observability: Monitoring, logging, and tracing are essential for understanding the behavior of microservices in production. Tools like Prometheus, Grafana, ELK stack (Elasticsearch, Logstash, Kibana), and distributed tracing systems (e.g., Jaeger, Zipkin) provide insights into system performance and behavior.
            
            J.Versioning and Compatibility: Microservices should be versioned to enable backward and forward compatibility. API versioning strategies, such as semantic versioning, help ensure that changes to APIs do not break existing clients.
            
            By adhering to these principles, organizations can effectively deploy and manage microservices architectures, enabling them to build scalable, resilient, and maintainable systems.
   
            
