There are two parts that need to be addressed for this question: the authentication of incoming requests, and the authorization of the user who has triggered the request. Authentication deals with identifying who is trying to access the API, a student or an office admin. Authorization, on the other hand, deals with verifying that a particular user has access to a particular resource. In this case, that would be either the course or a student resource.

 

While securing the endpoints, note the following:

Session management needs to be STATELESS.
CSRF needs to be disabled.
 

You need to secure the following provided REST endpoints:

 

POST request to /course :

this operation can only be authorized to a user having the role of OFFICE_ADMIN
if any non-OFFICE_ADMIN user tries to perform this operation, it should result in an access-denied error and return ApiResponse as the response body with statusCode 403 and the message Authorization Failure-This user does not have the sufficient level of access
if authentication fails, return ApiResponse as the response body with statusCode 401 and the message Authentication Failure-The user name and password combination is incorrect
 

POST request to /student :

this operation can be authorized to both OFFICE_ADMIN and STUDENT_USER roles
if any non-(OFFICE_ADMIN or STUDENT_USER) user tries to perform this operation, it should result in an access-denied error and return ApiResponse as the response body with statusCode 403 and the message Authorization Failure-This user does not have the sufficient level of access
if authentication fails, return ApiResponse as the response body with statusCode 401 and the message Authentication Failure-The user name and password combination is incorrect
 

GET request to /course:

this operation should not need any authentication or authorization
 

The authentication and authorization features in this question are handled using HTTP Basic Authentication. For any given request to be authenticated, a header "Authorization: Basic {encoded user and password}" is passed. Generally, in a full-fledged web application, this password would be encoded, but for the scope of this question, the password will be a plain-text string. Note that authentication should be followed by authorization, not the other way around, so configure security configuration accordingly.

 

Your task is to complete the implementation of the WebSecurityConfig class so that it passes all the test cases when running the provided unit tests. Note that the user name and password combination have been configured as in-memory values in WebSecurityConfig.java. You just have to handle the part of defining authentication and authorization.

 

Example requests and responses
POST request to /course

Header = invalid_user:invalid_password

Request body:

{
 "courseId": 123,
 "courseName" : "Advanced Mathematics",
 "NameOfInstructor": "James Doe",
 "roomNumber": "22B",
 "prerequisites": ["120-Basic Mathematics","225-Introduction to Statistics"]
}

Response:

{
  "statusCode": 401,
  "message": "Authentication Failure-The user name and password combination is incorrect"
}
 

POST request to /course

Header = john_doe:student_password

Request body:

{
 "courseId": 123,
 "courseName" : "Advanced Mathematics",
 "NameOfInstructor": "James Doe",
 "roomNumber": "22B",
 "prerequisites": ["120-Basic Mathematics","225-Introduction to Statistics"]
}

Response:

{
  "statusCode": 403,
  "message": "Authorization Failure-This user does not have the sufficient level of access"
}
 

POST request to /course

Header = john_doe:admin_password

Request body:

{
 "courseId": 123,
 "courseName" : "Advanced Mathematics",
 "NameOfInstructor": "James Doe",
 "roomNumber": "22B",
 "prerequisites": ["120-Basic Mathematics","225-Introduction to Statistics"]
}

Response:

{
  "statusCode": 200,
  "message": "Added"
}
 

POST request to /student

Header = john_doe:admin_password

Request body:

{
 "studentId": 0921123,
 "firstName": "John",
 "lastName": "Doe"
}

Response:

{
  "statusCode": 200,
  "message": "Added"
}
 

POST request to /student

Header = john_doe:student_password

Request body:

{
 "studentId": 0921123,
 "firstName": "John",
 "lastName": "Doe"
}

Response:

{
  "statusCode": 200,
  "message": "Added"
}
 

GET request to /course

Header = null

Request body:

{
"courseId": 123,
 "courseName" : "Advanced Mathematics",
 "NameOfInstructor": "John Doe",
 "roomNumber": "22B",
 "prerequisites": ["120-Basic Mathematics","225-Introduction to Statistics"]
}

Response:

{
  "statusCode": 200,
  "message": "Courses"
}
