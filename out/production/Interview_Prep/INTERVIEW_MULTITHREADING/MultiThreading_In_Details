
---------------
Ideal Pool Size
---------------
CPU Intensive -> Number of Thread is equal to the number of cores
IO Intesive   -> Thread nouber could be higher
-------------
ForkJoin vs Executors
-------------
ForkJoinPool and ExecutorService are both part of the Java concurrency framework and serve different purposes.

ExecutorService:
General-Purpose Interface: ExecutorService is an interface that provides a higher-level interface for executing tasks asynchronously.
Flexible Task Execution: It offers a more general approach to execute tasks. It doesn't specialize in any particular type of tasks.
Task Submission: Allows submitting Runnable or Callable tasks for execution using methods like submit, invokeAll, or invokeAny.
ThreadPool Implementations: It can be implemented by various types of thread pools like ThreadPoolExecutor.
Control Over Threads: Provides more control over thread creation, termination, and pool size adjustments through configurations.
Task Management: Allows managing the execution status of submitted tasks through Future objects.
Use Cases: Suitable for general-purpose asynchronous task execution where you have a mix of different types of tasks to execute.
ForkJoinPool:
Specialized for Recursive Tasks: ForkJoinPool is designed specifically for parallelizing recursive algorithms by employing the
divide-and-conquer strategy.
Work Stealing Algorithm: Utilizes a work-stealing algorithm where threads can steal tasks from other threads' queues when idle.
ForkJoinTask: Focuses on executing tasks that extend the ForkJoinTask class, enabling tasks to split themselves into subtasks.
Task Synchronization: Provides mechanisms like join() to synchronize the completion of subtasks within a parent task.
Ideal for Divide-and-Conquer: Well-suited for problems that can be split into smaller subtasks, enabling parallel execution.
Automatic Thread Management: Typically manages its own pool of threads, automatically adjusting thread count based on workload.
Use Cases: Best used for tasks that can be divided into smaller subtasks and benefit from parallel execution, such as recursive
algorithms like quicksort, merge sort, matrix multiplication, etc.
When to Use Which:
General Tasks: For executing general asynchronous tasks, use ExecutorService.
Recursive Parallel Tasks: For problems that fit the divide-and-conquer model and can benefit from parallelization, ForkJoinPool is a better choice.
In summary, while both ExecutorService and ForkJoinPool belong to the Java concurrency framework and manage task execution, ExecutorService is more
general-purpose and flexible, while ForkJoinPool is specifically tailored for efficiently executing recursive, divide-and-conquer tasks in a parallelized manner.



***** ****
         *** *** ***
                   *** *** *** *** *** **** ***
Types of Pool in Executor Services
--- ---- ----- ----- ----- ------

1.ScheduledThreadPool -   Execute task after a specified delay or periodically
2.SingleThreadExecutor -> If you want the task to run sequence
3.CachedThreadPool ->     Dynamically mantain the thread pool and removes the ideal threads
4.FixedThreadPool ->      Useful when you have a specific number of tasks to execute and want to limit the number of
                           concurrent threads.