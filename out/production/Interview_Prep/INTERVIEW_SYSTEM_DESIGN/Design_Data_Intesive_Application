Chapter -3 Storage and reterival

1. Index is like the check post,it makes the read process faster.
2. Index is an additional metadata helps you to locate the data you want.
3. Index does not effect the actual content of the data base but it creates an overhead while writing the data
   becoz writing need re arrange the stuff
4. This is an important trade off(part of compromize),well chosen index speeds up the reading but
   slows down the writning
5.

Chapter - 4 Encoding
Chapter - 5 Replication

1. Keeping a copy of same data on multiple machines
2. It's simple replication,if data does not changes over time
3. Algorithm for replicating changes - Single leader,Multi leader and leaderless replication
4. To mantain data consistency Leader based replication or active/passive or master-slave replication .
5. Synchronous or Asynchronous
6. Synchronous is more reliable.
7. How to Handle HA(High Availabity) if node outages
   -> It could be follower failure
   • Each follower mantains logs of the data changes and request all data changes from the leader during the time.
   • This way of recovery called Catch - Up recovery.
   -> It could be leader failure
   -> Make another follower as Leader . It could be a manual job
8. Statement based replication i.e. If stament are autoincrementing ,non deterministic that is now() or Rand() for random number. The possible work around for this leader can replace any non deterministic function call the fixed return value when the followers all get the same value.
   Chapter - 6 Partioning
9. Also known as shrading
10. Partion is called shard in MongoDb,ElasticSearch
    Region in HBase
    Tablet in Bigtable
    Vnode in Casandra
    vBucket in CouchBase
11. Partion are defined in such a way that each piece of data i.e row or dcoument belongs to exactly one partition.
12. Important question --> If you have large amount of data and you want to partition it,How do you decide which records to store on which nodes?
13. Before a better solution one key term , A partition with disproportionately high load is called "Hot Spot".
14. Now Answer :::: ------>
    - Partioning BY Key Range : There certain downside if the all the keys are related then on epartition can be the HOT SPOT . To avoid we can prefix some sensor name
    - Partitioning By HASH OF KEY -----> Important Interview Question here
      ****\*\***** WHAT IS CONSISTEN HASHING **\*\***

---

       Consistent Hashing is a technique used in computer science and distributed systems to efficiently distribute data across multiple servers or nodes in a way that minimizes the amount of data movement and reassignment when nodes are added or removed from the system. It's commonly used in distributed caching systems, load balancers, and peer-to-peer networks.

In a distributed system, when data needs to be stored or retrieved, a hash function is typically used to map the data's key (or identifier) to a numerical value. In traditional hashing, this value would then be used to determine which server or node the data should be stored on. However, in a dynamic system where nodes can be added or removed, traditional hashing can lead to a lot of data movement whenever the number of nodes changes.

Consistent Hashing addresses this problem by ensuring that only a fraction of the data needs to be remapped when the number of nodes changes. Here's how it works:

1. Imagine a circle, representing the entire range of possible hash values.
2. Each node in the system is placed on the circle according to its own hash value or identifier.
3. To find the node for a particular piece of data, you hash its key to get a value, and then find the closest node on the circle in a clockwise direction.
4. The region between each node and its next node is responsible for storing the data that falls within that range.

When a new node is added, only the data that falls between its position and the position of the next node needs to be remapped. Similarly, when a node is removed, only the data that was previously mapped to that node needs to be remapped to its next neighbor.

This approach allows for efficient data distribution and minimizes the amount of data migration required when nodes are added or removed. It's particularly useful in scenarios where nodes frequently join or leave the system, as it prevents significant disruption to the overall data distribution.

Consistent Hashing is widely used in large-scale distributed systems to improve scalability, fault tolerance, and load balancing. It's a fundamental concept in designing robust and efficient distributed systems.\*\*\*

Partitioning Secondary Index
   Approach A and B work fine when  search by Primary key happens. If by Secondary Index then it won\'92t work \
   E.g.find all actions by user 123, 
       find all articles containing the word hogwash, 
       find all cars whose color is red, and so on ,
       Wont work in this type of partition.
   The problem with secondary index is that theu dont map neatly
      to partitions.There are two main approach partition with secondary 
      index: document-based 
             and term-based partiotioning.
   In document based indexing it manatins local indeces for that partion only.
===========================
Chapter - 7 Transactions
==== ==== === ==== === ====
============= =============

ACID 
Atomicity -> Abort the transaction if one fails
             In terms of mlti threaded, atomicity means if one theread
             is owrking on any resoource,other thread wont get half executed value. They will get 
             after or before value only
Consistency -> data consistency not stale data
Isolation   -> 
Durability  ->

Isolation Levels :
  a. READ COMMMITED
  b. READ UNCOMMITED
  c. REPEATABLE READ
  d. SERIALIZABLE
2PL - 2 Phase lockings


Chapter 8 - Problems with Distributed systems
TCP VS UDP
Chapter 10 - Batch Processing
   MapReduce
   Hadoop
   HDFS - based on shared nothing princple
   MapReduce Job execution
   Dataflow engined - Spark
Graphs and Iterative Processing
   Graph-like data models
Chapter 11 - Stream Processing
    Messaging System publish/subscribe models
    Stream join   
Chapter 12 - Future of Data systems
    How will you do fulltext search
    materilized Views
    What happens when we create index