1. Concurrency is the easiest way to leverage multiprocessor systems to exploit better performance.
2. A thread is an independent execution flow in a program, with its own stack, but sharing the same heap as other threads in the program.
3. When writing concurrent programs, one must be careful to synchronize access to heap memory, used by multiple threads.
4. Benefits of Thread
   - threads are used to better utilize available resources & throughput in server applications.
   - Whenever you have naturally asynchronous tasks, it is often easier to model these with threads.
   - They can be used to exploit multiple processors.
   - In a multi-processor system, a single-threaded program is only leveraging 1/N CPU resources, where N = cpu count.
   - Even in single-processor systems, multithreaded programs can be useful when e.g. you have to wait for file I/O & want to do another task in the meantime.
   - A useful metaphor is reading the newspaper, while waiting for the water to boil, rather than waiting for the water to boil & then reading the newspaper.
5. Deadlocks are an example of a liveness hazard - thread A locks resource A' and waits for resource B'. thread B locks resource B' and waits for resource A'.
   - Liveness means "something good eventually happens". When there is a liveness problem, it often means that a program has reached a state from which it can't exit.
   - An example of this in a single-threaded program is entering an infinite loop. In multi-threaded programs, there are additional liveness risks involved.
6.
