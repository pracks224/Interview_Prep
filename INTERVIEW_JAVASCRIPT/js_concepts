1.How to create object in Javascript?
  ### Ans
  ```
   a) Creating objects using object literal syntax . key value pairs separated by ‘:’ inside a set of curly braces({ })
     const person = {
          firstName: 'testFirstName',
          lastName: 'testLastName'
          };
   b) Using new keyword; const person = new Object(); person.firstname ="Prakash"  
       Also, this practice is not recommended as there is a scope resolution that happens behind the scenes to find if the constructor function is built-in or user-defined. Difficult to create more object also.
   c) Using ‘new’ with user defined constructor function
      In this approach first create one function constructor and then create object.
      ex. function Person (firstname,lastaname){
                          this.firstname = firstname;
                          this.lastname = lastname;
                          }
           const personOne = new Person('testFirstNameOne', 'testLastNameOne');
           const personTwo = new Person('testFirstNameTwo', 'testLastNameTwo');
    d) Using Object.create() to create new objects
        This pattern comes in very handy when we are asked to create objects from other existing objects and not directly using the ‘new’ keyword.
        Object.create method, just remember that it takes two parameters. The first parameter is a mandatory object that serves as the prototype of the new object to be created. The second parameter is an optional object which contains the properties to be added to the new object.
        e.g. const orgObject = { company: 'ABC Corp' };
              And you want to create employees for this organization. Clearly, you want all the employee objects.
              const employee = Object.create(orgObject, { name: { value: 'EmployeeOne' } });

              console.log(employee); // { company: "ABC Corp" }
              console.log(employee.name); // "EmployeeOne"
     e) Using Object.assign() to create new objects
        The Object.assign() method is used to copy the values of all enumerable own properties from one or more source objects to a target object. It will return the target object.

const orgObject = { company: 'ABC Corp' }
const carObject = { carName: 'Ford' }
const employee = Object.assign({}, orgObject, carObject);

2. Difference between Object.freeze() and const in JavaScript ?
Ans:
     The const keyword creates a read-only reference to a value. Variables created by the const keyword are immutable. In other words, you can’t reassign them to different values. Trying to reassign a constant variable will result in a TypeError.
     const name = "test"
     name = "rrr" //TypeError: Assignment to constant variable.
     The const keyword ensures that the variable created is read-only. But It doesn’t mean that the actual value to which the const variable reference is immutable.
     const person = { name:"xyz"
     }
     person.name = "abc" - > no type error

     Object.freeze() method: If you want the value of the person object to be immutable, you have to freeze it by using the Object.freeze() method.
     But it freeze only the existing values,however we can add new properties.
     const person = Object.freeze({
    name: 'Geeksforgeeks',
    address: {
        city:"Noida"
    }

});
person.address.country = "India"
console.log(person.address.country) // It will pring India ,even though it is already freezed.

3. Why do we use Object cloning methods in Javascript?

•  Understanding and implementing deep copy and shallow copy in JavaScript is important for creating reliable and 
   maintainable code, particularly when working with complex data structures that may be modified by multiple parts 
   of your application.
•  Objects and arrays are reference types. When you create a new variable that points to an object or an array, it 
   doesnot create a new copy of that object or array in memory but rather creates a reference to the same object or 
   array.
• In javascript,we have two ways to copy - ShallowCopy and DeepCopy
    Copy By Value (Data) and Copy By reference
• When we assign an object to another it copies the references,hence we need deep and shallow.
  e.g. 
       let person = {
        name: "Prakash Sharma"
       }
       let user = person;
       user.name = "Sharma"
       console.log(person.name); // output: Sharma

SHALLOW COPY
METHOD 1 - Object.assigne() -> Copy by value,it wont change the original object
        
        let person = {
        name: "Prakash Sharma"
       }
       let user = Object.assigne({},person);
       user.name = "Sharma"
       console.log(person.name); // output: "Prakash Sharma"

METHOD 2 - Destrcutring,using spread operator
       
       let person = {
        name: "Prakash Sharma"
       }
       let user = (...person);
       user.name = "Sharma"
       console.log(person.name); // output: "Prakash Sharma"
DEEP COPY
     stringify,structuredcopy

4. Error handling in NodeJs
Ans : Errors in Node.js can be handled using `try/catch` for synchronous code and `.catch()` or error event listeners for asynchronous operations. The `error` 
      event in streams is used to handle errors that occur during reading or writing operations in streams. 

5. Why Call back is hell ?
   Callback hell occurs when you have multiple nested callbacks. You can avoid it by 
   using Promises, async/await, or libraries like async.js or Promise.all. Here's an example using 
   async/await:
   
   async function fetchData() {
    try {
      const data1 = await getDataFromAPI1();
      const data2 = await getDataFromAPI2(data1);
      const data3 = await getDataFromAPI3(data2);
      // ...
    } catch (error) {
      console.error(error);
    }
  }
6.What is the difference between setTimeout and setImmediate in Node.js?
Ans: 
setTimeout schedules a callback to run after a specified delay, while setImmediate schedules a 
callback to run at the end of the current event loop iteration. 
setImmediate has higher priority.

